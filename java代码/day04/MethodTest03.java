/*
	关于java语言当中的方法：
		1. 方法怎么定义，语法结构；
			[修饰符列表] 返回值类型 方法名(形式参数列表){
				方法体;	
			}

		2. 对以上的语法结构进行解释说明：
			-- 关于修饰符列表：
				* 可选项，不是必须的
				* 目前统一写成：public static【以后讲】
				* 方法的修饰符列表当中有static关键字的话，怎么调用这个方法？
					类名.方法名(实际参数列表);

			-- 返回值类型：
				* 什么是返回值？
					一个方法是可以完成某个特定功能的，这个功能结束之后，大多数都是需要返回最终执行结果的，执行结果可能是一个具体存在的数据，只要是数据，一定会有类型。这个具体存在的数据，就是返回值

				* 返回值类型？
					返回值是一个具体存在的数据，数据都是有类型的，此处需要指定的是返回值的具体类型

				* 返回值类型都可以指定哪些类型呢？
					java中的任意一种数据类型都可以，包括基本数据类型和所有的引用数据类型
				
				* 也可能这个方法执行结束之后，不返回任何数据，java中规定：当一个方法执行结束之后不返回任何数据的话，返回值类型的位置必须编写void关键字

				* 返回值类型可以是：byte,short,int,long,float,double,boolean,char,String,void...

				* 返回值类型如果不是void，表示这个方法执行结束之后，必须返回一个具体的数据，当方法执行结束的时候，如果没有返回任何数据，则编译器报错。怎么返回值呢？代码怎么写呢？
					return 值;
					并且要求“值”的数据类型必须和“方法的返回值类型”一致	
					
				* 当返回值类型是void的时候，在方法中不能编写 return 值; 这样的语句，但是要注意，可以编写return;这样的语句

				* 只要带有return关键字的语句执行，return语句所在的方法结束

			-- 方法名：
				* 只要是合法的标识符就行
				* 方法名最好见名知意
				* 方法名最好是动词
				* 方法名首字母小写，后面每个单词首字母大写

			-- 形式参数（简称形参）列表：
				* 形参是局部变量：int a; double b; float c; String s; ...
				* 形参的个数可以是：0 ~ N个
				* 多个形参之间用 , 隔开
				* 形参中起决定性作用的是形参的数据类型，形参的名字就是局部变量的名字。如：
				* 方法在调用的时候，实际给这个方法传递的真实数据，被称为实际参数，简称实参
				* 实参列表和形参列表必须满足：
					数量相同
					类型对应相同
					
					// 方法定义
					public static int sum(String a, int b){
					}
					sum("abc","def"); // 编译报错
					sum("abc",20); // 编译通过

			-- 方法体必须由大括号括起来，方法体当中的代码有顺序，遵循自上而下的顺序依次执行，并且方法体由java语句构成，每一个java语句;结尾

		3. 方法怎么调用？
			-- 方法只定义，不去调用是不会执行的，只有在调用的时候才会执行
			-- 语法规则：当方法的修饰符列表中又static时
				类名.方法名(实参列表); // 表示调用某个类的某个方法
				
*/

// public表示公开的
// class表示定义类
// MethodTest03是一个类名
public class MethodTest03{ // 表示定义一个类，起名MethodTest03，由于是公开的类，所以源文件名必须是：MethodTest03.java

	// 类体
	// 类体中不能直接编写java语句，除声明变量外
	// 方法出现在类体当中

	// 方法
	// public表示公开的
	// static表示静态的
	// void表示方法执行结束之后，不返回任何数据
	// main是方法名，主方法
	// (String[] args)：形式参数列表，其中String[]是一种引用数据类型，args是一个局部变量的变量名
	// 所以以下只要args这个局部变量的变量名是可以随意写的
	// 主方法就需要这样固定编写，这是程序的入口【这是SUN规定的，必须这样写才行】
	public static void main(String[] args){

		// 这里的程序是一定会执行的
		// main方法是JVM负责调用的，是一个入口位置
		// 从这里作为起点，开始执行程序
		// 既然是这样，我们就可以在这里编写java语句来调用其他方法
		// 调用MethodTest03的sum方法，传递两个实参
		MethodTest03.sum(10, 20);

		// 注意：方法体当中的代码是有顺序的，遵循自上而下的顺序依次执行
		// 如；92行的程序执行不结束，无法执行98行的代码【实际上执行到了这里，main方法暂停了，进入了sum方法执行，sum方法执行结束之后，表示main方法的107行执行完毕，再继续往下执行】

		// 一个方法可以被重复调用
		int a = 100;
		MethodTest03.sum(a, 500);

		// 再次调用方法
		int k = 90;
		int f = 10;
		MethodTest03.sum(k, f);

	}

	// 自定义方法，不是程序的入口
	// 方法作用：计算两个int类型数据的和，不要求返回结果，但是要求将结果直接输出到控制台
	// 修饰符列表：public static
	// 返回值类型：void
	// 方法名：sum
	// 形式参数列表：(int i,int j)
	// 方法体：主要任务就是求和之后，输出结果
	public static void sum(int i, int j){
		int sum = i + j;
		System.out.println(i + " + " + j + " = " + sum);
	}

}